// DAZ Studio version 4.22.0.15 filetype DAZ Script

var includeDir_oFILE = new DzFile( getScriptFileName() );
var sIncludePath = includeDir_oFILE.path();

(function(){
    
var diffuseOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_d_M.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_d.png",
    sIncludePath + "/genesis9_head_modesty_overlay_d_M.png",
    ];
var normalOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_nm_M.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_nm.png",
    sIncludePath + "/genesis9_head_modesty_overlay_nm_M.png",
];
var roughnessOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_r_M.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_r.png",
    sIncludePath + "/genesis9_head_modesty_overlay_r_M.png",
    ];
// // TODO: make specular overlay if needed
// var specularOverlayImagePath = sIncludePath + "/genesis9_torso_modesty_overlay_r.png"

// SubFunction to replace diffuse map with layered texture
function replaceColorPropertyWithLayeredTexture(material, colorProperty, overlayImagePath) {
    // Get the current texture map
    var currentTextureMap = colorProperty.getMapValue();
    if (!currentTextureMap) {
        print("No current texture map found.");
        return;
    }

    var materialName = material.name;
    var layeredTextureName = "Layered " + colorProperty.name + " for " + materialName;

    // Create a new layered texture
    var oImageMgr = App.getImageMgr();
    var layeredTexture = oImageMgr.createLayeredTexture(layeredTextureName);
    layeredTexture.size = new Size( 4096, 4096 );
    
    if (currentTextureMap.inherits("DzLayeredTexture")) {
    	// Deep copy existing Layered Texture to new Layered Texture
	    layeredTexture.copyFrom(currentTextureMap);
	}
	else
	{
	    // Add the original texture map as the base layer
	    var baseLayer = layeredTexture.createLayer("Base Layer");
	    baseLayer.imageFile = currentTextureMap.getFilename();			
	}

    // Add the overlay image as a new layer
    var overlayLayer = layeredTexture.createLayer("Overlay Layer");
    overlayLayer.imageFile = overlayImagePath;

    // Assign the new layered texture to the material's diffuse color property
    colorProperty.setMap(layeredTexture);

    // NECESSARY FOR SCRIPT TO WORK ATOMICLY
    // getPreviewPixmap is called to force Texture Baking to file
	layeredTexture.getPreviewPixmap(1,1);
	
}

// Function to replace the texture map with a layered texture
function replaceMaterialWithLayeredTextures(material, overlay_index) {
    if (!material) {
        print("Material is not valid.");
        return;
    }

    // Access the "Diffuse Color" property of the material
    var diffuseColor = material.findProperty("Diffuse Color");
    if (!diffuseColor) {
        print("Material does not have a 'Diffuse Color' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, diffuseColor, diffuseOverlayImagePath[overlay_index]);
    }

    var diffuseColor = material.findProperty("Translucency Color");
    if (!diffuseColor) {
        print("Material does not have a 'Diffuse Color' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, diffuseColor, diffuseOverlayImagePath[overlay_index]);
    }

    var normalMap = material.findProperty("Normal Map");
    if (!normalMap) {
        print("Material does not have a 'Normal Map' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, normalMap, normalOverlayImagePath[overlay_index]);
    }

    var normalMap = material.findProperty("Detail Normal Map");
    if (!normalMap) {
        print("Material does not have a 'Normal Map' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, normalMap, normalOverlayImagePath[overlay_index]);
    }

    var roughnessMap = material.findProperty("Specular Lobe 1 Roughness");
    if (!roughnessMap) {
        roughnessMap = material.findProperty("Glossy Roughness");
    }
    if (roughnessMap) {
        replaceColorPropertyWithLayeredTexture(material, roughnessMap, roughnessOverlayImagePath[overlay_index]);
    }

    // var specularMap = material.findProperty("Dual Lobe Specular Weight");
    // if (!specularMap) {
    //     specularMap = material.findProperty("Dual Lobe Specular Reflectivity");
    //     if (!specularMap) {
    //         specularMap = material.findProperty("Glossy Reflectivity");
    //     }
    // }
    // if (specularMap) {
    //     replaceColorPropertyWithLayeredTexture(material, specularMap, specularOverlayImagePath);
    // }

    print("Replaced texture map with layered texture for material: " + material.name);
}


// Modified function to enumerate materials of the currently selected node
function main() {
    var selectedNode = Scene.getPrimarySelection();
    
    if (selectedNode) {
        print("Selected Node: " + selectedNode.name);
        var object = selectedNode.getObject();
        
        if (object) {
            var shape = object.getCurrentShape();
            var materialCount = shape.getNumMaterials();
            print("Number of Materials: " + materialCount);
            
            for (var i = 0; i < materialCount; i++) {
                var material = shape.getMaterial(i);
                print("Material " + (i + 1) + ": " + material.name);
                if (material.name == "Body") {
                    // Process selected ColorMaps of each body material
                    replaceMaterialWithLayeredTextures(material, 0);
                }
                else if (material.name == "Legs") {
                    replaceMaterialWithLayeredTextures(material, 1);
                }
                else if (material.name == "Head") {
                    replaceMaterialWithLayeredTextures(material, 2);
                }
            }
        } else {
            print("The selected node is not a figure or prop with materials.");
        }
    } else {
        print("No node is currently selected.");
    }
}

// Call the function to enumerate materials and process "Diffuse Color"
main();

})();