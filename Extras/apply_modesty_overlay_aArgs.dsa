// DAZ Studio version 4.22.0.15 filetype DAZ Script

var includeDir_oFILE = new DzFile( getScriptFileName() );
var sIncludePath = includeDir_oFILE.path();

(function( aArgs ){

var diffuseOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_d.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_d.png",
    "",
    ];
var normalOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_nm.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_nm.png",
    "",
];
var roughnessOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_r.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_r.png",
    "",
];
var metallicOverlayImagePath = [
    sIncludePath + "/genesis9_torso_modesty_overlay_m.png",
    sIncludePath + "/genesis9_legs_modesty_overlay_m.png",
    "",
];
    
function processArguments() {
//    print("apply_modesty_overlay_aArgs.dsa: Sanity Checking...");
    if (!aArgs || Array.isArray(aArgs) == false) {
        App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Arguments are not an array; continuing with default values.");
        return false;
    }
    // Sanity Checks
    if (aArgs.length != 4) {
        App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Invalid Number of Arguments, expected 4, got " + aArgs.length + "; continuing with default values.");
        return false;
    }
    for ( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
        var aSubArray = aArgs[i];
        if ( !Array.isArray(aSubArray) ) {
            App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Argument " + i + " is not an array; continuing with default values.");
            return false;
        }
        if ( aSubArray.length != 3 ) {
            App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Argument " + i + " does not have enough elements, expected 3, got " + aSubArray.length + "; continuing with default values.");
            return false;
        }
        for (var j = 0; j < aSubArray.length; j++) {
            if (typeof aSubArray[j] !== "string") {
                App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Argument " + i + " element " + j + " is not a string; continuing with default values.");
                return false;
            }
        }
    }

    // Iterate over the arguments passed to the script
    for( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
        var aSubArray = aArgs[i];
        for (var j = 0; j < aSubArray.length; j++) {
            switch (i) {
                case 0:
                    diffuseOverlayImagePath[j] = aSubArray[j];
                    break;
                case 1:
                    normalOverlayImagePath[j] = aSubArray[j];
                    break;
                case 2:
                    roughnessOverlayImagePath[j] = aSubArray[j];
                    break;
                case 3:
                    metallicOverlayImagePath[j] = aSubArray[j];
                    break;
                default:
                    App.log("apply_modesty_overlay_aArgs.dsa, processArguments(): CRITCIAL ERROR: Invalid Argument Index: " + i + "; results may be unpredictable.");
                    break;
            }
        }
    }

    return true;
};


// SubFunction to replace diffuse map with layered texture
function replaceColorPropertyWithLayeredTexture(material, colorProperty, overlayImagePath) {
    if (!overlayImagePath || overlayImagePath == "") {
//        print("apply_modesty_overlay_aArgs.dsa: No overlay image path found.");
        return;
    }

    var fiOverlayImage = new DzFileInfo(overlayImagePath);
    if ( fiOverlayImage.exists() == false ) {
        App.log("apply_modesty_overlay_aArgs.dsa: ERROR: Overlay image does not exist: " + overlayImagePath);
        fiOverlayImage.deleteLater();
        return;
    }
    fiOverlayImage.deleteLater();

    // Get the current texture map
    var currentTextureMap = colorProperty.getMapValue();
    if (!currentTextureMap) {
//        print("apply_modesty_overlay_aArgs.dsa: No current texture map found.");
        return;
    }

    var materialName = material.name;
    var layeredTextureName = "Layered " + colorProperty.name + " for " + materialName;

    // Create a new layered texture
    var oImageMgr = App.getImageMgr();
    var layeredTexture = oImageMgr.createLayeredTexture(layeredTextureName);
    layeredTexture.size = new Size( 4096, 4096 );
    
    if (currentTextureMap.inherits("DzLayeredTexture")) {
    	// Deep copy existing Layered Texture to new Layered Texture
	    layeredTexture.copyFrom(currentTextureMap);
	}
	else
	{
	    // Add the original texture map as the base layer
	    var baseLayer = layeredTexture.createLayer("Base Layer");
	    baseLayer.imageFile = currentTextureMap.getFilename();			
	}

    // Add the overlay image as a new layer
    var overlayLayer = layeredTexture.createLayer("Overlay Layer");
    overlayLayer.imageFile = overlayImagePath;

    // Assign the new layered texture to the material's diffuse color property
    colorProperty.setMap(layeredTexture);

    // NECESSARY FOR SCRIPT TO WORK ATOMICLY
    // getPreviewPixmap is called to force Texture Baking to file
	layeredTexture.getPreviewPixmap(1,1);
	
}

// Function to replace the texture map with a layered texture
function replaceMaterialWithLayeredTextures(material, overlay_index) {
    if (!material) {
        print("apply_modesty_overlay_aArgs.dsa: Material is not valid.");
        return;
    }

    // Access the "Diffuse Color" property of the material
    var diffuseColor = material.findProperty("Diffuse Color");
    if (!diffuseColor) {
        print("apply_modesty_overlay_aArgs.dsa: Material does not have a 'Diffuse Color' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, diffuseColor, diffuseOverlayImagePath[overlay_index]);
    }

    var diffuseColor = material.findProperty("Translucency Color");
    if (!diffuseColor) {
        print("apply_modesty_overlay_aArgs.dsa: Material does not have a 'Diffuse Color' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, diffuseColor, diffuseOverlayImagePath[overlay_index]);
    }

    var normalMap = material.findProperty("Normal Map");
    if (!normalMap) {
        print("apply_modesty_overlay_aArgs.dsa: Material does not have a 'Normal Map' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, normalMap, normalOverlayImagePath[overlay_index]);
    }

    var normalMap = material.findProperty("Detail Normal Map");
    if (!normalMap) {
        print("apply_modesty_overlay_aArgs.dsa: Material does not have a 'Normal Map' property.");
    } else {
        replaceColorPropertyWithLayeredTexture(material, normalMap, normalOverlayImagePath[overlay_index]);
    }

    var roughnessMap = material.findProperty("Specular Lobe 1 Roughness");
    if (!roughnessMap) {
        roughnessMap = material.findProperty("Glossy Roughness");
    }
    if (roughnessMap) {
        replaceColorPropertyWithLayeredTexture(material, roughnessMap, roughnessOverlayImagePath[overlay_index]);
    }

    var specularMap = material.findProperty("Dual Lobe Specular Weight");
    if (!specularMap || !specularMap.getMapValue()) {
        specularMap = material.findProperty("Dual Lobe Specular Reflectivity");
        if (!specularMap || !specularMap.getMapValue()) {
            specularMap = material.findProperty("Glossy Reflectivity");
        }
    }
    if (specularMap && specularMap.getMapValue()) {
        print("DEBUG: apply_modesty_overlay_aArgs.dsa: applying specular overlay...");
        replaceColorPropertyWithLayeredTexture(material, specularMap, roughnessOverlayImagePath[overlay_index]);
    }

    var metallicMap = material.findProperty("Metallic Weight");
    if (metallicMap && metallicMap.getMapValue()) {
        print("DEBUG: apply_modesty_overlay_aArgs.dsa: applying metallic overlay...");
        replaceColorPropertyWithLayeredTexture(material, metallicMap, metallicOverlayImagePath[overlay_index]);
    }

    print("apply_modesty_overlay_aArgs.dsa: Replaced texture map with layered texture for material: " + material.name);
}


// Modified function to enumerate materials of the currently selected node
function main() {
    if (!processArguments()) {
        print("apply_modesty_overlay_aArgs.dsa: Failed to process arguments, using default values, see Log for details.");
    }

    var selectedNode = Scene.getPrimarySelection();
    
    if (selectedNode) {
        print("apply_modesty_overlay_aArgs.dsa: Selected Node: " + selectedNode.name);
        var object = selectedNode.getObject();
        
        if (object) {
            var shape = object.getCurrentShape();
            var materialCount = shape.getNumMaterials();
            print("apply_modesty_overlay_aArgs.dsa: Number of Materials: " + materialCount);
            
            for (var i = 0; i < materialCount; i++) {
                var material = shape.getMaterial(i);
//                print("DEBUG: apply_modesty_overlay_aArgs.dsa: Material " + (i + 1) + ": " + material.name);
                if (material.name == "Body") {
                    // Process selected ColorMaps of each body material
                    replaceMaterialWithLayeredTextures(material, 0);
                }
                else if (material.name == "Legs") {
                    replaceMaterialWithLayeredTextures(material, 1);
                }
                else if (material.name == "Head") {
                    replaceMaterialWithLayeredTextures(material, 2);
                }
            }
        } else {
            print("apply_modesty_overlay_aArgs.dsa: The selected node is not a figure or prop with materials.");
        }
    } else {
        print("apply_modesty_overlay_aArgs.dsa: No node is currently selected.");
    }
}

// Call the function to enumerate materials and process "Diffuse Color"
main();

})( getArguments() );